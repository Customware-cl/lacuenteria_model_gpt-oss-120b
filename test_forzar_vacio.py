#!/usr/bin/env python3
"""
Test para forzar respuesta vac√≠a del modelo y verificar que se detiene sin reintentos
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

from llm_client import LLMClient
import json

def test_respuesta_vacia():
    """Test directo del cliente LLM con prompt que fuerza respuesta vac√≠a"""
    
    print("=" * 70)
    print("üß™ TEST DE RESPUESTA VAC√çA FORZADA")
    print("=" * 70)
    
    client = LLMClient()
    
    # Prompt dise√±ado para causar respuesta vac√≠a o error
    system_prompt = "Solo responde con JSON v√°lido"
    user_prompt = """
    INSTRUCCI√ìN IMPOSIBLE: Genera un JSON con 1000000 campos √∫nicos, 
    cada uno con una historia completa de 5000 palabras.
    Esto excede los l√≠mites del modelo y deber√≠a causar truncamiento o fallo.
    
    {
        "campo_1": "historia de 5000 palabras aqu√≠...",
        "campo_2": "otra historia de 5000 palabras...",
        ... (continuar hasta 1000000 campos)
    }
    """
    
    print("\nüìù Enviando prompt dise√±ado para causar fallo...")
    print("üéØ Expectativa: Detenci√≥n inmediata sin reintentos")
    
    try:
        response = client.generate(
            system_prompt=system_prompt,
            user_prompt=user_prompt,
            max_tokens=8000,
            temperature=0.7
        )
        
        if response and response.get('content'):
            print(f"\n‚ùå El modelo gener√≥ contenido: {len(response['content'])} caracteres")
            print(f"Primeros 200 caracteres: {response['content'][:200]}")
        else:
            print("\n‚úÖ Respuesta vac√≠a detectada correctamente")
            
    except ValueError as e:
        if "STOP:" in str(e):
            print(f"\n‚úÖ Sistema detenido correctamente: {e}")
            print("‚úÖ NO se realizaron reintentos")
        else:
            print(f"\n‚ùå Error inesperado: {e}")
    except Exception as e:
        print(f"\n‚ùå Error no manejado: {e}")

if __name__ == "__main__":
    test_respuesta_vacia()