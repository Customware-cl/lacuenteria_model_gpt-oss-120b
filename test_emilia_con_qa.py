#!/usr/bin/env python3
"""
Prueba completa del sistema con verificador QA usando el brief de Emilia.
Ejecuta el pipeline completo y muestra el progreso con las evaluaciones QA reales.
"""
import requests
import json
import time
from datetime import datetime

def crear_historia_emilia():
    """Crea una nueva historia con el brief de Emilia"""
    
    url = "http://localhost:5000/api/stories/create"
    
    payload = {
        "story_id": f"emilia-qa-test-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
        "personajes": ["Emilia", "Unicornio"],
        "historia": "Emilia juega sola en su jard√≠n cuando descubre un unicornio m√°gico. El unicornio ha perdido su voz y no puede hablar. Emilia, que tambi√©n es no verbal, le ense√±a a comunicarse con gestos y se√±as. Juntos descubren que pueden crear magia cuando combinan sus formas √∫nicas de expresi√≥n. La sombra del silencio que segu√≠a al unicornio se desvanece cuando aprende que hay muchas formas de decir 'te quiero'.",
        "mensaje_a_transmitir": "La comunicaci√≥n va m√°s all√° de las palabras habladas, y cada forma de expresi√≥n es v√°lida y hermosa",
        "edad_objetivo": 5
    }
    
    print("\nüöÄ INICIANDO GENERACI√ìN CON VERIFICADOR QA")
    print("=" * 60)
    print(f"Story ID: {payload['story_id']}")
    print(f"Personajes: {', '.join(payload['personajes'])}")
    print(f"Edad objetivo: {payload['edad_objetivo']} a√±os")
    print("=" * 60)
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 202:
            print("‚úÖ Historia iniciada correctamente")
            return payload["story_id"]
        else:
            print(f"‚ùå Error: {response.status_code}")
            print(response.text)
            return None
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

def monitorear_progreso(story_id):
    """Monitorea el progreso mostrando las evaluaciones QA"""
    
    url = f"http://localhost:5000/api/stories/{story_id}/status"
    
    print("\nüìä MONITOREANDO PROGRESO CON VERIFICADOR QA")
    print("-" * 60)
    
    agentes_procesados = set()
    ultimo_estado = None
    intentos_sin_cambio = 0
    max_intentos = 180  # 15 minutos m√°ximo
    
    while intentos_sin_cambio < max_intentos:
        try:
            response = requests.get(url, timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                estado = data.get("status")
                agente_actual = data.get("current_agent", "")
                
                # Detectar cambio de agente
                if agente_actual and agente_actual not in agentes_procesados:
                    agentes_procesados.add(agente_actual)
                    print(f"\nü§ñ Agente: {agente_actual}")
                    print(f"   Estado: Ejecutando...")
                
                # Si el estado cambi√≥, mostrar info
                if estado != ultimo_estado:
                    ultimo_estado = estado
                    intentos_sin_cambio = 0
                    
                    if estado == "completed":
                        print("\n‚úÖ GENERACI√ìN COMPLETADA")
                        return True
                    elif estado == "error":
                        print(f"\n‚ùå ERROR: {data.get('error', 'Desconocido')}")
                        return False
                else:
                    intentos_sin_cambio += 1
                
                # Mostrar punto de progreso cada 10 segundos
                if intentos_sin_cambio % 2 == 0:
                    print(".", end="", flush=True)
                
            time.sleep(5)
            
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è Interrumpido por usuario")
            return False
        except Exception as e:
            print(f"\n‚ùå Error monitoreando: {e}")
            intentos_sin_cambio += 1
            time.sleep(5)
    
    print("\n‚è±Ô∏è Timeout - La generaci√≥n est√° tomando demasiado tiempo")
    return False

def obtener_metricas_qa(story_id):
    """Obtiene las m√©tricas QA consolidadas"""
    
    print("\nüìà OBTENIENDO M√âTRICAS QA DEL VERIFICADOR")
    print("-" * 60)
    
    # Primero intentar obtener logs para ver QA scores
    url_logs = f"http://localhost:5000/api/stories/{story_id}/logs"
    
    try:
        response = requests.get(url_logs, timeout=10)
        
        if response.status_code == 200:
            logs = response.json()
            
            print("\nüìä QA SCORES POR AGENTE (Verificador Independiente):")
            print("-" * 40)
            
            for agente, log_data in logs.items():
                if isinstance(log_data, list) and log_data:
                    ultimo_log = log_data[-1]
                    qa_scores = ultimo_log.get("qa_scores", {})
                    
                    if qa_scores and "promedio" in qa_scores:
                        promedio = qa_scores["promedio"]
                        status = "‚úÖ" if promedio >= 4.0 else "‚ùå"
                        reintentos = ultimo_log.get("retry_count", 0)
                        
                        print(f"\n{agente}:")
                        print(f"  Promedio QA: {promedio}/5 {status}")
                        print(f"  Reintentos: {reintentos}")
                        
                        # Mostrar m√©tricas individuales
                        for metrica, valor in qa_scores.items():
                            if metrica != "promedio":
                                print(f"    ‚Ä¢ {metrica}: {valor}")
    
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudieron obtener logs: {e}")
    
    # Ahora obtener el resultado final
    print("\nüìÑ OBTENIENDO CUENTO GENERADO")
    print("-" * 60)
    
    url_result = f"http://localhost:5000/api/stories/{story_id}/result"
    
    try:
        response = requests.get(url_result, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            
            # Mostrar resumen de calidad
            if "qa_scores" in result:
                qa_summary = result["qa_scores"]
                
                print("\nüéØ RESUMEN DE CALIDAD FINAL:")
                print("-" * 40)
                
                # Calcular promedio global
                promedios = []
                for agente, scores in qa_summary.get("by_agent", {}).items():
                    if "promedio" in scores:
                        promedios.append(scores["promedio"])
                
                if promedios:
                    promedio_global = sum(promedios) / len(promedios)
                    print(f"Promedio Global QA: {promedio_global:.2f}/5")
                    
                    if promedio_global >= 4.0:
                        print("‚úÖ Calidad APROBADA por verificador")
                    elif promedio_global >= 3.5:
                        print("‚ö†Ô∏è Calidad ACEPTABLE con observaciones")
                    else:
                        print("‚ùå Calidad BAJA seg√∫n verificador")
            
            # Mostrar t√≠tulo si existe
            if "story" in result and "titulo" in result["story"]:
                print(f"\nüìñ T√≠tulo generado: \"{result['story']['titulo']}\"")
            
            return result
        else:
            print(f"‚ùå Error obteniendo resultado: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

def main():
    """Funci√≥n principal"""
    
    print("\nüß™ PRUEBA COMPLETA DEL SISTEMA CON VERIFICADOR QA")
    print("=" * 60)
    print("Esta prueba ejecutar√° el pipeline completo con el nuevo")
    print("sistema de evaluaci√≥n QA independiente.")
    print("=" * 60)
    
    # Verificar que el servidor est√© corriendo
    try:
        response = requests.get("http://localhost:5000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor activo y listo")
        else:
            print("‚ùå Servidor no responde correctamente")
            return
    except:
        print("‚ùå No se puede conectar al servidor")
        print("   Ejecuta: python3 src/api_server.py")
        return
    
    # Crear historia
    story_id = crear_historia_emilia()
    
    if not story_id:
        print("‚ùå No se pudo crear la historia")
        return
    
    # Monitorear progreso
    print("\n‚è≥ Procesando... (esto puede tomar varios minutos)")
    print("   El verificador QA evaluar√° cada agente")
    print("   Los agentes con QA < 4.0 se reintentar√°n")
    
    completado = monitorear_progreso(story_id)
    
    if completado:
        # Obtener m√©tricas finales
        resultado = obtener_metricas_qa(story_id)
        
        if resultado:
            print("\n" + "=" * 60)
            print("‚úÖ PRUEBA COMPLETADA EXITOSAMENTE")
            print(f"   Story ID: {story_id}")
            print("=" * 60)
            
            # Guardar resultado
            filename = f"resultado_qa_{story_id}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(resultado, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ Resultado guardado en: {filename}")
    else:
        print("\n" + "=" * 60)
        print("‚ùå LA PRUEBA NO SE COMPLET√ì")
        print("=" * 60)

if __name__ == "__main__":
    main()